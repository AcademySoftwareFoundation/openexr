///////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2002, Industrial Light & Magic, a division of Lucas
// Digital Ltd. LLC
// 
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// *       Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// *       Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// *       Neither the name of Industrial Light & Magic nor the names of
// its contributors may be used to endorse or promote products derived
// from this software without specific prior written permission. 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
///////////////////////////////////////////////////////////////////////////

//
// exrdisplay pipeline
//
// Simon Green <SGreen@nvidia.com>
// Drew Hess <dhess@ilm.com>
//

half3 knee (half3 x, half f)
{
    return log (x * f + 1) / f;
}

fragout main(vf30 In,
	     uniform texobjRECT image,
             uniform float3 defog,
             uniform float exposure,
             uniform float gamma = 1.0/2.2,
	     uniform half3 zerovec = {0,0,0},
	     uniform half grayTarget,
	     uniform half kneeLow,
	     uniform half kneeF
             )
{
    fragout Out;

    half3 c = h3texRECT(image, In.TEX0.xy);

    c = max(zerovec, c - defog);

    c *= exposure;

    // knee

    c = (c > kneeLow) ? kneeLow + knee (c - kneeLow, kneeF) : c;

    // gamma correction
    // could use texture lookups for this

    c = pow(c, gamma);

    // scale middle gray to the target framebuffer value

    c *= grayTarget;

    Out.col.xyz = c;

    return Out;
}
