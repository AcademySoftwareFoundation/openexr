//
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

//-----------------------------------------------------------------------------
//
//	class Compressor
//
//-----------------------------------------------------------------------------

#include "ImfCheckedArithmetic.h"
#include "ImfNamespace.h"
#include "ImfCompressor.h"
${EXR_COMPRESSION_INCLUDES}

OPENEXR_IMF_INTERNAL_NAMESPACE_SOURCE_ENTER

using IMATH_NAMESPACE::Box2i;

Compressor::Compressor (const Header& hdr) : _header (hdr)
{}

Compressor::~Compressor ()
{}

Compressor::Format
Compressor::format () const
{
    return XDR;
}

int
Compressor::compressTile (
    const char* inPtr, int inSize, Box2i range, const char*& outPtr)
{
    return compress (inPtr, inSize, range.min.y, outPtr);
}

int
Compressor::uncompressTile (
    const char* inPtr, int inSize, Box2i range, const char*& outPtr)
{
    return uncompress (inPtr, inSize, range.min.y, outPtr);
}

bool
isValidCompression (Compression c)
{
    return isValidCompressionId (c);
}

bool
isLossyCompression (Compression c)
{
    return isLossyCompressionId (c);
}

bool
isValidDeepCompression (Compression c)
{
    return isDeepCompressionId (c);
}

Compressor*
newCompressor (Compression c, size_t maxScanLineSize, const Header& hdr)
{
    switch (c)
    {
    // DO NOT EDIT: THIS FILE IS GENERATED BY CMAKE.
${EXR_NEW_COMPRESSOR}

        default: return 0;
    }
}

// for a given compression type, return the number of scanlines
// compressed into a single chunk
// TODO add to API and move to ImfCompressor.cpp
int
numLinesInBuffer (Compression comp)
{
    int numScanlines = getCompressionNumScanlines (comp);
    if (numScanlines < 1)
        throw IEX_NAMESPACE::ArgExc ("Unknown compression type");
    return numScanlines;
}

Compressor*
newTileCompressor (
    Compression c, size_t tileLineSize, size_t numTileLines, const Header& hdr)
{
    switch (c)
    {
    // DO NOT EDIT: THIS FILE IS GENERATED BY CMAKE.
${EXR_NEW_TILE_COMPRESSOR}

        default: return 0;
    }
}

OPENEXR_IMF_INTERNAL_NAMESPACE_SOURCE_EXIT
