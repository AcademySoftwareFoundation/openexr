//
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_COMPRESSION_H
#define INCLUDED_IMF_COMPRESSION_H

//-----------------------------------------------------------------------------
//
//	enum Compression
//
//-----------------------------------------------------------------------------
#include "ImfExport.h"
#include "ImfNamespace.h"
#include <string>
#include <cstring>
#include <map>

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER

enum IMF_EXPORT_ENUM Compression
{
    // DO NOT EDIT: THIS FILE IS GENERATED BY CMAKE.
${EXR_CODEC_ENUM_DEFINITION}
};

struct CompressionDesc
{
    std::string name;
    std::string desc;
    int         numScanlines;
    bool        lossy;
    bool        deep;

    CompressionDesc (
        std::string _name,
        std::string _desc,
        int         _scanlines,
        bool        _lossy,
        bool        _deep)
    {
        name         = _name;
        desc         = _desc;
        numScanlines = _scanlines;
        lossy        = _lossy;
        deep         = _deep;
    }
};

// clang-format off
static const std::map<Compression, CompressionDesc> IdToDesc = {
    // DO NOT EDIT: THIS FILE IS GENERATED BY CMAKE.
${EXR_CODEC_DECLARATIONS}
};
// clang-format on

static const std::map<std::string, Compression> CompressionNameToId = {
    // DO NOT EDIT: THIS FILE IS GENERATED BY CMAKE.
${EXR_CODEC_NAME_TO_ID}
};

#define UNKNOWN_COMPRESSION_ID_MSG "INVALID COMPRESSION ID"

/// Returns a codec ID's short name (lowercase).
IMF_EXPORT inline void
getCompressionNameFromId (const Compression id, std::string& name)
{
    auto it = IdToDesc.find (id);
    name = it != IdToDesc.end () ? it->second.name : UNKNOWN_COMPRESSION_ID_MSG;
}

/// Returns a codec ID's short description (lowercase).
IMF_EXPORT inline void
getCompressionDescriptionFromId (const Compression id, std::string& desc)
{
    auto it = IdToDesc.find (id);
    desc    = it != IdToDesc.end () ? it->second.name + ": " + it->second.desc
                                    : UNKNOWN_COMPRESSION_ID_MSG;
}

/// Returns the codec name's ID, NUM_COMPRESSION_METHODS if not found.
IMF_EXPORT inline void
getCompressionIdFromName (const std::string& name, Compression& id)
{
    std::string lowercaseName (name);
    for (auto& ch: lowercaseName)
        ch = std::tolower (ch);

    auto it = CompressionNameToId.find (lowercaseName);
    id      = it != CompressionNameToId.end ()
                  ? it->second
                  : Compression::NUM_COMPRESSION_METHODS;
}

/// Return true if a compression id exists.
IMF_EXPORT inline bool
isValidCompressionId (const Compression id)
{
    return IdToDesc.find (id) != IdToDesc.end ();
}

/// Return a string enumerating all compression names, with a custom separator.
IMF_EXPORT inline void
getCompressionNamesString (const std::string separator, std::string& in)
{
    for (auto it = IdToDesc.begin (); it != std::prev (IdToDesc.end ()); ++it)
    {
        in += it->second.name + separator;
    }
    in += std::prev (IdToDesc.end ())->second.name;
}

/// Return the number of scan lines expected by a given compression method.
IMF_EXPORT inline int
getCompressionNumScanlines (const Compression id)
{
    auto it = IdToDesc.find (id);
    return it != IdToDesc.end () ? it->second.numScanlines : -1;
}

/// Return true is the compression method does not preserve the data's integrity.
IMF_EXPORT inline bool
isLossyCompressionId (const Compression id)
{
    auto it = IdToDesc.find (id);
    return it != IdToDesc.end () ? it->second.lossy : false;
}

/// Return true is the compression method supports deep data.
IMF_EXPORT inline bool
isDeepCompressionId (const Compression id)
{
    auto it = IdToDesc.find (id);
    return it != IdToDesc.end () ? it->second.deep : false;
}

/// Controls the default zip compression level used. Zip is used for
/// the 2 zip levels as well as some modes of the DWAA/B compression.
IMF_EXPORT void setDefaultZipCompressionLevel (int level);

/// Controls the default quality level for the DWA lossy compression
IMF_EXPORT void setDefaultDwaCompressionLevel (float level);

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
