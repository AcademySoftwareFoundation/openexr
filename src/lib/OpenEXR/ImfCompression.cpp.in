//
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

//-----------------------------------------------------------------------------
//
//  DO NOT EDIT !
//  ImfCompression.cpp is generated from ImfCompression.cpp.in by cmake
//  (with UPDATE_COMPRESSOR_LIST=ON)
//
//-----------------------------------------------------------------------------

#include "ImfNamespace.h"
#include "ImfCompression.h"
#include <map>

OPENEXR_IMF_INTERNAL_NAMESPACE_SOURCE_ENTER

struct CompressionDesc
{
    std::string name;
    std::string desc;
    int         numScanlines;
    bool        lossy;
    bool        deep;

    CompressionDesc (
        std::string _name,
        std::string _desc,
        int         _scanlines,
        bool        _lossy,
        bool        _deep)
    {
        name         = _name;
        desc         = _desc;
        numScanlines = _scanlines;
        lossy        = _lossy;
        deep         = _deep;
    }
};

// clang-format off
static const CompressionDesc IdToDesc[] = {
    // DO NOT EDIT: See top of file for details.
${EXR_CODEC_DECLARATIONS}
};

static const std::map<std::string, Compression> CompressionNameToId = {
    // DO NOT EDIT: See top of file for details.
${EXR_CODEC_NAME_TO_ID}
};
// clang-format on

#define UNKNOWN_COMPRESSION_ID_MSG "INVALID COMPRESSION ID"

/// Returns a codec ID's short name (lowercase).
void
getCompressionNameFromId (Compression id, std::string& name)
{
    if (id < NO_COMPRESSION || id >= NUM_COMPRESSION_METHODS)
        name = UNKNOWN_COMPRESSION_ID_MSG;
    name = IdToDesc[static_cast<int> (id)].name;
}

/// Returns a codec ID's short description (lowercase).
void
getCompressionDescriptionFromId (Compression id, std::string& desc)
{
    if (id < NO_COMPRESSION || id >= NUM_COMPRESSION_METHODS)
        desc = UNKNOWN_COMPRESSION_ID_MSG;
    desc = IdToDesc[static_cast<int> (id)].name + ": " +
           IdToDesc[static_cast<int> (id)].desc;
}

/// Returns the codec name's ID, NUM_COMPRESSION_METHODS if not found.
void
getCompressionIdFromName (const std::string& name, Compression& id)
{
    std::string lowercaseName (name);
    for (auto& ch: lowercaseName)
        ch = std::tolower (ch);

    auto it = CompressionNameToId.find (lowercaseName);
    id      = it != CompressionNameToId.end ()
                  ? it->second
                  : Compression::NUM_COMPRESSION_METHODS;
}

/// Return true if a compression id exists.
bool
isValidCompressionId (Compression id)
{
    return id >= NO_COMPRESSION && id < NUM_COMPRESSION_METHODS;
}

/// Return a string enumerating all compression names, with a custom separator.
void
getCompressionNamesString (const std::string& separator, std::string& str)
{
    int i = 0;
    for (; i < static_cast<int> (NUM_COMPRESSION_METHODS) - 1; i++)
    {
        str += IdToDesc[i].name + separator;
    }
    str += IdToDesc[i].name;
}

/// Return the number of scan lines expected by a given compression method.
int
getCompressionNumScanlines (Compression id)
{
    if (id < NO_COMPRESSION || id >= NUM_COMPRESSION_METHODS) return -1;
    return IdToDesc[static_cast<int> (id)].numScanlines;
}

/// Return true is the compression method does not preserve the data's integrity.
bool
isLossyCompressionId (Compression id)
{
    if (id < NO_COMPRESSION || id >= NUM_COMPRESSION_METHODS) return false;
    return IdToDesc[static_cast<int> (id)].lossy;
}

/// Return true is the compression method supports deep data.
bool
isDeepCompressionId (Compression id)
{
    if (id < NO_COMPRESSION || id >= NUM_COMPRESSION_METHODS) return false;
    return IdToDesc[static_cast<int> (id)].deep;
}

OPENEXR_IMF_INTERNAL_NAMESPACE_SOURCE_EXIT
