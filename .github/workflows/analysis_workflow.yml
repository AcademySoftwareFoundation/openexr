# SPDX-License-Identifier: BSD-3-Clause
# Copyright Contributors to the OpenEXR Project.
#
# GitHub Actions workflow file
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: Analysis

on:
  schedule:
    # Weekly Sunday build
    - cron: "0 0 * * 0"

jobs:

  # ---------------------------------------------------------------------------
  # SonarCloud static analysis
  # ---------------------------------------------------------------------------

  linux_sonarcloud:
    name: 'SonarCloud Linux CentOS 7 VFX CY2020 <GCC 6.3.1>'
    # GH-hosted VM. The build runs in CentOS 7 'container' defined below.
    runs-on: ubuntu-latest
    container:
      # DockerHub: https://hub.docker.com/u/aswf
      # Source: https://github.com/AcademySoftwareFoundation/aswf-docker
      image: aswf/ci-openexr:2020
    env:
      CXX: g++
      CC: gcc
    steps:
      # TODO: Remove this workaround following resolution of:
      #       https://github.com/AcademySoftwareFoundation/aswf-docker/issues/43
      - name: Setup container
        run: sudo rm -rf /usr/local/lib64/cmake/glew
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_CXX_STANDARD=11 \
                -DCMAKE_CXX_FLAGS="-g -O0 -fprofile-arcs -ftest-coverage" \
                -DCMAKE_CXX_OUTPUT_EXTENSION_REPLACE=ON \
                -DCMAKE_EXE_LINKER_FLAGS="-lgcov" \
                -DCMAKE_VERBOSE_MAKEFILE:BOOL='OFF' \
                -DBUILD_SHARED_LIBS=${{ matrix.build-shared }} \
                -DOPENEXR_BUILD_UTILS='ON' \
                -DOPENEXR_RUN_FUZZ_TESTS='OFF' \
                -DPYTHON_EXECUTABLE=$(which python)
        working-directory: _build
      - name: Build OpenEXR with build-wrapper
        shell: bash
        run: |
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${PWD}/IlmBase/Half:${PWD}/IlmBase/IlmThread:${PWD}/IlmBase/Iex:${PWD}/IlmBase/IexMath:${PWD}/IlmBase/Imath:${PWD}/OpenEXR/IlmImf:${PWD}/OpenEXR/IlmImfUtil
          echo ${PWD}
          echo ${LD_LIBRARY_PATH}
          build-wrapper-linux-x86-64 --out-dir bw_output make clean all
        working-directory: _build
      - name: Test
        run: |
          ctest -T Test \
                -C Release \
                -E PyIlmBase.*_Python2 \
                --timeout 7200 \
                --output-on-failure \
                -VV
        working-directory: _build
      - name: Generate code coverage report
        run: share/ci/scripts/linux/run_gcov.sh
        shell: bash
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner -X -Dsonar.login=$SONAR_TOKEN

  # ------------------------------------------------------------------------------
  #  Valgrind memcheck test
  # ------------------------------------------------------------------------------
  linux_valgrind:
    name: 'Valgrind Linux CentOS 7 VFX CY2020 <GCC 6.3.1>'
    # GH-hosted VM. The build runs in CentOS 7 'container' defined below.
    runs-on: ubuntu-latest
    container:
      # DockerHub: https://hub.docker.com/u/aswf
      # Source: https://github.com/AcademySoftwareFoundation/aswf-docker
      image: aswf/ci-openexr:2020
    env:
      CXX: g++
      CC: gcc
    steps:
      # TODO: Remove this workaround following resolution of:
      #       https://github.com/AcademySoftwareFoundation/aswf-docker/issues/43
      - name: Setup container
        run: sudo rm -rf /usr/local/lib64/cmake/glew
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
        shell: bash
      - name: Install Dependencies
        run: |
          share/ci/scripts/linux/install_valgrind.sh 
        shell: bash
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_CXX_STANDARD=14 \
                -DCMAKE_VERBOSE_MAKEFILE:BOOL='OFF' \
                -DBUILD_SHARED_LIBS='ON' \
                -DOPENEXR_BUILD_UTILS='ON' \
                -DOPENEXR_RUN_FUZZ_TESTS='OFF' \
                -DPYTHON_EXECUTABLE=$(which python) 
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config Release \
                -- -j2
        working-directory: _build
      - name: Valgrind memcheck tests
        run: |
          ctest -C Release \
                -E PyIlmBase.*_Python2 \
                --timeout 50000 \
                --force-new-ctest-process \
                --test-action memcheck \
                --output-on-failure \
                -VV
        working-directory: _build
      - name: Valgrind memcheck test results
        run: |
          share/ci/scripts/linux/log_valgrind.sh _build
        shell: bash

  # ------------------------------------------------------------------------------
  #  Fuzz test
  # ------------------------------------------------------------------------------
  linux_fuzz:
    name: 'Fuzz Test Linux CentOS 7 VFX CY2020 <GCC 6.3.1>'
    # GH-hosted VM. The build runs in CentOS 7 'container' defined below.
    runs-on: ubuntu-latest
    container:
      # DockerHub: https://hub.docker.com/u/aswf
      # Source: https://github.com/AcademySoftwareFoundation/aswf-docker
      image: aswf/ci-openexr:2020
    env:
      CXX: g++
      CC: gcc
    steps:
      # TODO: Remove this workaround following resolution of:
      #       https://github.com/AcademySoftwareFoundation/aswf-docker/issues/43
      - name: Setup container
        run: sudo rm -rf /usr/local/lib64/cmake/glew
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
        shell: bash
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_CXX_STANDARD=14 \
                -DCMAKE_VERBOSE_MAKEFILE:BOOL='OFF' \
                -DBUILD_SHARED_LIBS='ON' \
                -DOPENEXR_BUILD_UTILS='ON' \
                -DOPENEXR_RUN_FUZZ_TESTS='ON' \
                -DPYTHON_EXECUTABLE=$(which python) 
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config Release \
                -- -j2
        working-directory: _build
      - name: Fuzz test
        run: |
          ls
          ls bin
          bin/IlmImfFuzzTest
        working-directory: _build


