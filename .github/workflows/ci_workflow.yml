# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) Contributors to the OpenEXR Project.
#
# GitHub Actions workflow file
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: CI

on:
  push:
    # Versioned branches and tags are ignored for OpenEXR <= 1.x.x
    branches-ignore:
      - RB-2.*
    tags-ignore:
      - v1.*
      - v2.*
    # Jobs are skipped when ONLY Markdown (*.md) files are changed
    paths-ignore:
      - '**.md'
  pull_request:
    branches-ignore:
      - RB-2.*
    tags-ignore:
      - v1.*
      - v2.*
    paths-ignore:
      - '**.md'

jobs:
  # Linux jobs run in Docker containers, so the latest OS version is OK. macOS 
  # and Windows jobs need to be locked to specific virtual environment 
  # versions to mitigate issues from OS updates, and will require maintenance 
  # as OS versions are retired.
  #
  # GH Actions (Free plan) supports 20 concurrent jobs, with 5 concurrent macOS 
  # jobs. This workflow tries to utilize (but not exceed) that budget to 
  # promote timely CI.

  # ---------------------------------------------------------------------------
  # Linux
  # ---------------------------------------------------------------------------
  # TODO: Add ARM build. Add sanitize build.

  linux:
    name: 'Linux CentOS 7 VFX CY${{ matrix.vfx-cy }} 
      <${{ matrix.compiler-desc }} 
       config=${{ matrix.build-type }}, 
       shared=${{ matrix.build-shared }}, 
       threads=${{ matrix.threads-enabled }}, 
       cxx=${{ matrix.cxx-standard }}>'
    # GH-hosted VM. The build runs in CentOS 7 'container' defined below.
    runs-on: ubuntu-latest
    container:
      # DockerHub: https://hub.docker.com/u/aswf
      # Source: https://github.com/AcademySoftwareFoundation/aswf-docker
      image: aswf/ci-openexr:${{ matrix.vfx-cy }}
    strategy:
      matrix:
        build: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
        include:
          # -------------------------------------------------------------------
          # GCC, VFX CY2020
          # -------------------------------------------------------------------
          # Shared, Release
          - build: 1
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            threads-enabled: 'ON'
            vfx-cy: 2020
            exclude-tests:
          # Shared, Debug
          - build: 2
            build-type: Debug
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            threads-enabled: 'ON'
            vfx-cy: 2020
            exclude-tests:
          # Static, Release
          - build: 3
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            threads-enabled: 'ON'
            vfx-cy: 2020
            exclude-tests:
          # Static, Debug
          - build: 4
            build-type: Debug
            build-shared: 'OFF'
            cxx-standard: 14
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            threads-enabled: 'ON'
            vfx-cy: 2020
            exclude-tests:
          # -------------------------------------------------------------------
          # GCC, VFX CY2019
          # -------------------------------------------------------------------
          #
          - build: 5
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            threads-enabled: 'ON'
            vfx-cy: 2019
            exclude-tests: 
          # -------------------------------------------------------------------
          # Clang, VFX CY2020
          # -------------------------------------------------------------------
          # Release
          - build: 6
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            threads-enabled: 'ON'
            vfx-cy: 2020
            exclude-tests:
          # Debug
          - build: 7
            build-type: Debug
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            threads-enabled: 'ON'
            vfx-cy: 2020
            exclude-tests:
          # Static, Release
          - build: 8
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            threads-enabled: 'ON'
            vfx-cy: 2020
            exclude-tests:
          # Static, Debug
          - build: 9
            build-type: Debug
            build-shared: 'OFF'
            cxx-standard: 14
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            threads-enabled: 'ON'
            vfx-cy: 2020
            exclude-tests:
          # -------------------------------------------------------------------
          # Clang, VFX CY2019
          # -------------------------------------------------------------------
          # 
          - build: 10
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            threads-enabled: 'ON'
            vfx-cy: 2019
            exclude-tests:
          # -------------------------------------------------------------------
          # Other config variants
          # -------------------------------------------------------------------
          # 
          - build: 11
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            threads-enabled: 'OFF'
            vfx-cy: 2020
            exclude-tests:
    env:
      CXX: ${{ matrix.cxx-compiler }}
      CC: ${{ matrix.cc-compiler }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DCMAKE_CXX_FLAGS=${{ matrix.cxx-flags }} \
                -DCMAKE_VERBOSE_MAKEFILE:BOOL='OFF' \
                -DBUILD_SHARED_LIBS=${{ matrix.build-shared }} \
                -DOPENEXR_BUILD_UTILS='ON' \
                -DOPENEXR_RUN_FUZZ_TESTS='OFF' \
                -DOPENEXR_ENABLE_THREADING=${{ matrix.threads-enabled }} \
                -DPYTHON_EXECUTABLE=$(which python) 
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config ${{ matrix.build-type }} \
                -- -j4
        working-directory: _build
      - name: Test
        run: |
          ctest -T Test ${{ matrix.exclude-tests }} \
                -C ${{ matrix.build-type }} \
                --timeout 7200 \
                --output-on-failure \
                -VV
        working-directory: _build

  # ---------------------------------------------------------------------------
  # macOS
  # ---------------------------------------------------------------------------
  # TODO: Add ARM64/x86_64 (universal 2) build
  
  macos:
    name: 'macOS 10.15 
      <AppleClang 11.0 
       config=${{ matrix.build-type }}, 
       shared=${{ matrix.build-shared }}, 
       cxx=${{ matrix.cxx-standard }}, 
       docs=${{ matrix.build-docs }}>'
    runs-on: macos-10.15
    strategy:
      matrix:
        build: [1, 2, 3, 4, 5]
        include:
          # C++11, Release
          - build: 1
            build-type: Release
            build-shared: 'ON'
            build-docs: 'ON'
            cxx-standard: 11
            exclude-tests:
          # Debug
          - build: 2
            build-type: Debug
            build-shared: 'ON'
            build-docs: 'OFF'
            cxx-standard: 11
            exclude-tests:
          # C++14
          - build: 3
            build-type: Release
            build-shared: 'ON'
            build-docs: 'OFF'
            cxx-standard: 14
            exclude-tests:
          # Static
          - build: 4
            build-type: Release
            build-shared: 'OFF'
            build-docs: 'OFF'
            cxx-standard: 14
            exclude-tests:
          # Static, Debug
          - build: 5
            build-type: Release
            build-shared: 'ON'
            build-docs: 'OFF'
            cxx-standard: 14
            exclude-tests:
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DCMAKE_CXX_FLAGS=${{ matrix.cxx-flags }} \
                -DCMAKE_VERBOSE_MAKEFILE:BOOL='OFF' \
                -DBUILD_SHARED_LIBS=${{ matrix.build-shared }} \
                -DOPENEXR_BUILD_UTILS='ON' \
                -DOPENEXR_RUN_FUZZ_TESTS='OFF'
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config ${{ matrix.build-type }} \
                -- -j2
        working-directory: _build
      - name: Test
        run: |
          ctest -T Test ${{matrix.exclude-tests }} \
                -C ${{matrix.build-type}} \
                --timeout 7200 \
                --output-on-failure \
                -VV
        working-directory: _build

  # ---------------------------------------------------------------------------
  # Windows
  # ---------------------------------------------------------------------------
  # TODO: Debug mode is catatonically slow under windows
  windows:
    name: 'Windows 2019 
      <MSVC 16.4 
       config=${{ matrix.build-type }}, 
       shared=${{ matrix.build-shared }}, 
       cxx=${{ matrix.cxx-standard }}, 
       docs=${{ matrix.build-docs }}>'
    runs-on: windows-2019
    strategy:
      matrix:
        #build: [1, 2, 3, 4]
        build: [1, 2, 3, 4]
        include:
          # C++11, Shared, Release
          - build: 1
            build-type: Release
            build-shared: 'ON'
            build-docs: 'ON'
            cxx-standard: 11
            exclude-tests:
          # C++14, Shared, Release
          - build: 2
            build-type: Release
            build-shared: 'ON'
            build-docs: 'OFF'
            cxx-standard: 14
            exclude-tests: ''
          # C++11, Static, Release
          - build: 3
            build-type: Release
            build-shared: 'OFF'
            build-docs: 'OFF'
            cxx-standard: 14
            exclude-tests: ''
          # C++14, Static, Release
          - build: 4
            build-type: Release
            build-shared: 'OFF'
            build-docs: 'OFF'
            cxx-standard: 14
            exclude-tests: ''
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
        shell: bash
      ## - name: Install Dependences
      ##   run: |
      ##     share/ci/scripts/windows/install_python.ps1 ${{ matrix.python-version }} $HOME 
      ##     share/ci/scripts/windows/install_boost.ps1 ${{ matrix.boost-version }} $HOME 3.8
      ##     share/ci/scripts/windows/install_zlib.ps1 ${{ matrix.zlib-version }} $HOME 
      ##   shell: powershell
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DCMAKE_CXX_FLAGS=${{ matrix.cxx-flags }} \
                -DCMAKE_VERBOSE_MAKEFILE:BOOL='OFF' \
                -DBUILD_SHARED_LIBS=${{ matrix.build-shared }} \
                -DOPENEXR_BUILD_UTILS='ON' \
                -DOPENEXR_RUN_FUZZ_TESTS='OFF' 
        shell: bash
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config ${{ matrix.build-type }}
        shell: bash
        working-directory: _build
      - name: Test
        run: |
          ctest -T Test ${{ matrix.exclude-tests }} \
                -C ${{ matrix.build-type }} \
                --timeout 7200 \
                --output-on-failure \
                -VV
        shell: bash
        working-directory: _build
