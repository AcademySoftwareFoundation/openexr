# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) Contributors to the OpenEXR Project.

# These are the steps for all CI jobs. Linux, macOS, and Windows all
# share a common set of configure/build/validate steps.  The input
# variables control all variations of the jobs.
#
# Each job validates that the proper files are installed by comparing
# the install_manifest.txt to a reference for that job. This requires
# that each job have a corresponding reference, and that thes
# references are updated when any change is made to the installation
# headers/libraries/cmake/etc.

name: CI Steps

on:
  workflow_call:
    # This inputs receive values via the "with:" section in ci_workflow.yml
    inputs:
      build:
        type: string
      os:
        type: string
      container:
        type: string
      cxx-standard:
        type: string
      cxx-compiler:
        type: string
      cc-compiler:
        type: string
      build-type:
        type: string
      msystem:
        type: string
      BUILD_SHARED_LIBS:
        type: string
      OPENEXR_ENABLE_THREADING:
        type: string
      OPENEXR_INSTALL_PKG_CONFIG:
        type: string
      OPENEXR_INSTALL_DOCS:
        type: string
      OPENEXR_BUILD_EXAMPLES:
        type: string
      OPENEXR_BUILD_TOOLS:
        type: string
      OPENEXR_FORCE_INTERNAL_IMATH:
        type: string
      OPENEXR_FORCE_INTERNAL_DEFLATE:
        type: string
      OPENEXR_FORCE_INTERNAL_OPENJPH:
        type: string
      BUILD_TESTING:
        type: string
      namespace:
        type: string
      validate_install:
        type: string

jobs:
  steps:
    runs-on: ${{ inputs.os }}

    container:
      image: ${{ inputs.container }}

    env:
      CXX: ${{ inputs.cxx-compiler }}
      CC: ${{ inputs.cc-compiler }}
      ACTIONS_RUNNER_FORCE_ACTIONS_NODE_VERSION: node16
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

    steps:

      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Determine MSYS2 Packages
        if: inputs.msystem != ''
        run: |
          PACKAGES="cc:p cmake:p"
          if [ "${{ inputs.OPENEXR_FORCE_INTERNAL_IMATH }}" == "OFF" ]; then
            PACKAGES="$PACKAGES imath:p"
          fi
          if [ "${{ inputs.OPENEXR_FORCE_INTERNAL_DEFLATE }}" == "OFF" ]; then
            PACKAGES="$PACKAGES libdeflate:p"
          fi
          echo "PACBOY_PACKAGES=$PACKAGES" >> $GITHUB_ENV
        shell: bash

      - name: Install MSYS2 ${{ inputs.msystem }}
        if: inputs.msystem != ''
        uses: msys2/setup-msys2@61f9e5e925871ba6c9e3e8da24ede83ea27fa91f # v2.27.0
        with:
          msystem: ${{ inputs.msystem }}
          update: true
          install: git
          pacboy: ${{ env.PACBOY_PACKAGES }}

      - name: Install Imath
        # Pre-install Imath so the builds validate that find_package sees the external installation
        if: inputs.OPENEXR_FORCE_INTERNAL_IMATH == 'OFF' && inputs.msystem == ''
        run: share/ci/scripts/install_imath.sh main
        shell: bash

      - name: Install libdeflate
        # Pre-install libdeflate so the builds validate that find_package sees the external installation
        if: inputs.OPENEXR_FORCE_INTERNAL_DEFLATE == 'OFF' && inputs.msystem == ''
        run: share/ci/scripts/install_libdeflate.sh master
        shell: bash

      - name: Install OpenJPH
        # Pre-install OpenJPH so the builds validate finding the external installation
        if: ${{ inputs.OPENEXR_FORCE_INTERNAL_OPENJPH == 'OFF' }}
        run: share/ci/scripts/install_openjph.sh master
        shell: bash

      - name: Set PATH for Imath/libdeflate DLLs
        # When building against external Imath/libdeflate shared objects, the tests need PATH to include the dll's.
        if: contains(inputs.os, 'windows') && inputs.msystem == ''
        run: |
          echo "$PATH;C:/Program Files (x86)/Imath/bin;C:/Program Files (x86)/Imath/lib;C:/Program Files (x86)/libdeflate/bin;C:/Program Files (x86)/libdeflate/lib" >> $GITHUB_PATH
        shell: bash

      - name: Install help2man
        # TODO: this could go in the ASWF Linux docker
        # container. Also, it doesn't currently work for Windows, so
        # the windows builds have docs disabled.
        if: ${{ inputs.OPENEXR_INSTALL_DOCS == 'ON' }}
        run: share/ci/scripts/install_help2man.sh
        shell: bash

      - name: Create build directories
        run: mkdir _install _build _examples
        shell: bash

      - name: Construct CMake command
        run: |
          # Construct the cmake command as a variable, so the
          # Configure step below can execute it, but also so we can store
          # in in the install_manifest as a debugging reference
          cmake_args=("-B" "." "-S" "..")
          cmake_args+=("-DCMAKE_INSTALL_PREFIX=../_install")
          cmake_args+=("-DCMAKE_BUILD_TYPE=${{ inputs.build-type }}")
          cmake_args+=("-DOPENEXR_CXX_STANDARD=${{ inputs.cxx-standard }}")
          cmake_args+=("-DBUILD_SHARED_LIBS=${{ inputs.BUILD_SHARED_LIBS }}")
          cmake_args+=("-DOPENEXR_ENABLE_THREADING=${{ inputs.OPENEXR_ENABLE_THREADING }}")
          cmake_args+=("-DOPENEXR_INSTALL_PKG_CONFIG=${{ inputs.OPENEXR_INSTALL_PKG_CONFIG }}")
          cmake_args+=("-DOPENEXR_INSTALL_DOCS=${{ inputs.OPENEXR_INSTALL_DOCS }}")
          cmake_args+=("-DOPENEXR_BUILD_EXAMPLES=${{ inputs.OPENEXR_BUILD_EXAMPLES }}")
          cmake_args+=("-DOPENEXR_BUILD_TOOLS=${{ inputs.OPENEXR_BUILD_TOOLS }}")
          cmake_args+=("-DOPENEXR_FORCE_INTERNAL_IMATH=${{ inputs.OPENEXR_FORCE_INTERNAL_IMATH }}")
          cmake_args+=("-DOPENEXR_FORCE_INTERNAL_DEFLATE=${{ inputs.OPENEXR_FORCE_INTERNAL_DEFLATE }}")
          cmake_args+=("-DOPENEXR_FORCE_INTERNAL_OPENJPH=${{ inputs.OPENEXR_FORCE_INTERNAL_OPENJPH }}")
          cmake_args+=("-DBUILD_TESTING=${{ inputs.BUILD_TESTING }}")
          cmake_args+=("-DOPENEXR_RUN_FUZZ_TESTS=OFF")
          cmake_args+=("-DCMAKE_VERBOSE_MAKEFILE=ON")
          if [ -n "${{ inputs.namespace }}" ]; then
            cmake_args+=("-DOPENEXR_IMF_NAMESPACE=${{ inputs.namespace }}")
            cmake_args+=("-DILMTHREAD_NAMESPACE=${{ inputs.namespace }}")
            cmake_args+=("-DIEX_NAMESPACE=${{ inputs.namespace }}")
          fi
          if [ "${{ inputs.msystem }}" == "MINGW32" ]; then
            cmake_args+=("-DCMAKE_C_FLAGS=-msse2 -mfpmath=sse")
            cmake_args+=("-DCMAKE_CXX_FLAGS=-msse2 -mfpmath=sse")
          fi

          quoted_args=$(printf '%q ' "${cmake_args[@]}")
          echo "CMAKE_ARGS=$quoted_args" >> "$GITHUB_ENV"

          # Remove the os version from the manifest name, so it only
          # contains "ubuntu", "macos", or "windows", so the name is,
          # e.g. install_manifest.macos.1.txt
          echo "INSTALL_MANIFEST=$(echo 'install_manifest.${{ inputs.os }}' | cut -d'-' -f1).${{ inputs.build }}.txt" >> $GITHUB_ENV
        working-directory: _build
        shell: bash

      - name: Configure, Build, Test
        if: inputs.msystem == ''
        run: |
          cmake --version
          cmake ${{ env.CMAKE_ARGS }}
          cmake --build . --target install --config ${{ inputs.build-type }}
          if [ "${{ inputs.BUILD_TESTING }}" == "ON" ]; then
            ctest -T Test -C ${{ inputs.build-type }} --timeout 7200 --output-on-failure -VV
          fi
        working-directory: _build
        shell: bash

      - name: Configure, Build, Test (msys2) # requires msys2 shell
        if: inputs.msystem != ''
        run: |
          cmake --version
          cmake ${{ env.CMAKE_ARGS }}
          cmake --build . --target install --config ${{ inputs.build-type }}
          if [ "${{ inputs.BUILD_TESTING }}" == "ON" ]; then
            ctest -T Test -C ${{ inputs.build-type }} --timeout 7200 --output-on-failure -VV
          fi
        working-directory: _build
        shell: msys2 {0}

      - name: Prepare install_manifest
        # Store the cmake command as the first line of the manifest,
        # and remove the path prefix, so the manifest contains only
        # the local filenames.
        run: |
          echo "# cmake ${{ env.CMAKE_ARGS }}" > "_build/$INSTALL_MANIFEST"
          sort _build/install_manifest.txt | sed -e "s:^.*/_install/::" >> "_build/$INSTALL_MANIFEST"
        shell: bash

      - name: Upload install_manifest.txt
        # Upload the manifest to make it possible to download for inspection and debugging
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ env.INSTALL_MANIFEST }}
          path: _build/${{ env.INSTALL_MANIFEST }}

      - name: Validate install
        if: ${{ inputs.validate_install == 'ON' }}
        # Validate that the build has installed the proper files by comparing against the appropriate reference manifest
        run: |
          share/ci/scripts/validate_install.py "_build/$INSTALL_MANIFEST" "share/ci/install_manifest/$INSTALL_MANIFEST"
        shell: bash

