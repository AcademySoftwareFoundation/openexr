IF (WIN32)
  CMAKE_MINIMUM_REQUIRED(VERSION 3.11)
ELSE()
  CMAKE_MINIMUM_REQUIRED(VERSION 3.2)
ENDIF()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

include(OpenEXRVersion)

project(OpenEXR VERSION ${OPENEXR_VERSION})

include(OpenEXRSettings)

# Packages
find_package(ZLIB)
if(OPENEXR_BUILD_OPENEXR AND NOT ZLIB_FOUND)
  message(WARNING "Make Zlib available to CMake's search path, and re-run configuration")
  message(FATAL_ERROR "Zlib is a required dependency when OPENEXR_BUILD_OPENEXR is set")
endif()

if (OPENEXR_BUILD_PYTHON_LIBS)
  find_package(PythonLibs ${OPENEXR_PYTHON_MAJOR}.${OPENEXR_PYTHON_MINOR})
  if(NOT PythonLibs_FOUND)
    message(WARNING "Make Python ${OPENEXR_PYTHON_MAJOR}.${OPENEXR_PYTHON_MINOR} available to CMake's search path, and re-run configuration")
    message(FATAL_ERROR "Python is a required dependency when OPENEXR_BUILD_PYTHON_LIBS is set")
  endif()

  find_package(Boost COMPONENTS python${OPENEXR_PYTHON_MAJOR}${OPENEXR_PYTHON_MINOR})
  if(NOT Boost_PYTHON${OPENEXR_PYTHON_MAJOR}${OPENEXR_PYTHON_MINOR}_FOUND)
    message(WARNING "user provided Boost Python${OPENEXR_PYTHON_MAJOR}${OPENEXR_PYTHON_MINOR} was not found. Trying default path...")

    find_package(Boost COMPONENTS python)
    if(NOT Boost_PYTHON_FOUND)
      message(WARNING "Make boost Python available to CMake's search path, and re-run configuration")
      message(FATAL_ERROR "boost Python is a required dependency when OPENEXR_BUILD_PYTHON_LIBS is set")
    endif()
  endif()

  find_package(NumPy)
endif()

if(OPENEXR_BUILD_VIEWERS)
  message(WARNING "Viewers are currently out of order. Building anyway")
  SET (FLTK_SKIP_FLUID 1)
  find_package(FLTK)
  if(NOT FLTK_FOUND)
    message(WARNING "FLTK not found, exrdisplay will not be built")
  endif()
  find_package(OpenGL)
  if(NOT OpenGL_FOUND)
    message(WARNING "OpenGL not found, exrdisplay will not be built")
  endif()
endif()

if ((OPENEXR_BUILD_OPENEXR OR OPENEXR_BUILD_UTILS OR OPENEXR_BUILD_TESTS OR OPENEXR_BUILD_PYTHON_LIBS OR OPENEXR_BUILD_VIEWERS) AND NOT(OPENEXR_BUILD_ILMBASE))
  message(INFO "OPENEXR_BUILD_ILMBASE not requested, searching for installed IlmBase instead")
  find_package(IlmBase)
  if (NOT IlmBase_FOUND)
    message(ERROR "Could not find IlmBase, cannot build dependent libraries.")
    message(INFO, "Set ILMBASE_LOCATION to location of IlmBase.")
  endif()
endif()

if ((OPENEXR_BUILD_UTILS OR OPENEXR_BUILD_TESTS OR OPENEXR_BUILD_VIEWERS) AND NOT(OPENEXR_BUILD_OPENEXR))
  message(INFO "OPENEXR_BUILD_OPENEXR not requested, searching for installed OpenEXR instead")
  find_package(OpenEXR)
  if (NOT OpenEXR_FOUND)
    message(ERROR "Could not find OpenEXR, cannot build dependent libraries.")
    message(INFO, "Set OPENEXR_LOCATION to location of OpenEXR.")
  endif()
endif()

# Perform the build
if(OPENEXR_BUILD_ILMBASE)
    add_subdirectory(IlmBase)
endif()
if(OPENEXR_BUILD_OPENEXR)
    add_subdirectory(OpenEXR)
else()
    message(INFO, "Skipping OpenEXR build")
endif()
if(OPENEXR_BUILD_PYTHON_LIBS)
    add_subdirectory(PyIlmBase)
else()
    message(INFO, "Skipping Python bindings")
endif()
if(OPENEXR_BUILD_VIEWERS AND FLTK_FOUND AND OpenGL_FOUND)
    add_subdirectory(OpenEXR_Viewers)
else()
    message(INFO, "Skipping OpenEXR Viewers")
endif()
